version: "3.9"

services:

  api:
    image: sokrates1989/statechecker-server-api-and-check:DEBUG-0.1.0
    environment:
      # Database connection.
      - DB_HOST=${STACK_NAME}_db
      - DB_USER=state_checker
      - DB_PW_FILE=/run/secrets/STATECHECKER_SERVER_DB_USER_PW
      - DB_NAME=state_checker
      # Config file with website, folders and tools to check.
      - STATECHECKER_SERVER_CONFIG=${STATECHECKER_SERVER_CONFIG}
    secrets:
      - STATECHECKER_SERVER_DB_USER_PW
    networks:
      - state-checker-net
      - traefik
    volumes:
      - ${DATA_ROOT}/logs/api:/code/logs
    ports:
      - "${API_PORT}:${API_PORT}"
    deploy:
      labels:
        # Traefik.
        - traefik.enable=true
        - traefik.constraint-label=traefik-public
        - traefik.http.services.statechecker-server-api.loadbalancer.server.port=${API_PORT}
        - traefik.http.routers.statechecker-server-api.rule=Host(`${API_URL}`)
        - traefik.http.routers.statechecker-server-api.entrypoints=https,http,web
        - traefik.http.routers.statechecker-server-api.tls=true
        - traefik.http.routers.statechecker-server-api.tls.certresolver=le
      mode: replicated
      replicas: 1
    command: ["uvicorn", "main_api_startpoint:app", "--host", "0.0.0.0", "--port", "${API_PORT}"]


  check:
    image: sokrates1989/statechecker-server-api-and-check:DEBUG-0.1.0
    environment:
      # Check Frequency.
      - CHECK_WEBSITES_EVERY_X_MINUTES=${CHECK_WEBSITES_EVERY_X_MINUTES}
      - CHECK_GOOGLEDRIVE_EVERY_X_MINUTES=${CHECK_GOOGLEDRIVE_EVERY_X_MINUTES}
      # Database connection.
      - DB_HOST=${STACK_NAME}_db
      - DB_USER=state_checker
      - DB_PW_FILE=/run/secrets/STATECHECKER_SERVER_DB_USER_PW
      - DB_NAME=state_checker
      # Config file with website, folders and tools to check.
      - STATECHECKER_SERVER_CONFIG=${STATECHECKER_SERVER_CONFIG}
      # Google Drive Backup check.
      - GOOGLE_DRIVE_SERVICE_ACCOUNT_JSON_FILE=/run/secrets/STATECHECKER_SERVER_GOOGLE_DRIVE_SERVICE_ACCOUNT_JSON
      ## Messaging ##
      - STATUS_MESSAGES_TIME_OFFSET_PERCENTAGE=${STATUS_MESSAGES_TIME_OFFSET_PERCENTAGE}
      # Email.
      - EMAIL_ENABLED=${EMAIL_ENABLED}
      - EMAIL_SENDER_USER=${EMAIL_SENDER_USER}
      - EMAIL_SENDER_PASSWORD_FILE=/run/secrets/STATECHECKER_SERVER_EMAIL_SENDER_PASSWORD
      - EMAIL_SENDER_PASSWORD=${EMAIL_SENDER_PASSWORD}
      - EMAIL_SENDER_HOST=${EMAIL_SENDER_HOST}
      - EMAIL_SENDER_PORT=${EMAIL_SENDER_PORT}
      - EMAIL_RECIPIENTS_ERROR=${EMAIL_RECIPIENTS_ERROR}
      - EMAIL_RECIPIENTS_INFORMATION=${EMAIL_RECIPIENTS_INFORMATION}
      # Telegram.
      - TELEGRAM_ENABLED=${TELEGRAM_ENABLED}
      - TELEGRAM_STATUS_MESSAGES_EVERY_X_MINUTES=${TELEGRAM_STATUS_MESSAGES_EVERY_X_MINUTES}
      - TELEGRAM_SENDER_BOT_TOKEN_FILE=/run/secrets/STATECHECKER_SERVER_TELEGRAM_SENDER_BOT_TOKEN
      - TELEGRAM_SENDER_BOT_TOKEN=${TELEGRAM_SENDER_BOT_TOKEN}
      - TELEGRAM_RECIPIENTS_ERROR_CHAT_IDS=${TELEGRAM_RECIPIENTS_ERROR_CHAT_IDS}
      - TELEGRAM_RECIPIENTS_INFO_CHAT_IDS=${TELEGRAM_RECIPIENTS_INFO_CHAT_IDS}
    secrets:
      - STATECHECKER_SERVER_DB_USER_PW
      - STATECHECKER_SERVER_GOOGLE_DRIVE_SERVICE_ACCOUNT_JSON
      - STATECHECKER_SERVER_TELEGRAM_SENDER_BOT_TOKEN
      - STATECHECKER_SERVER_EMAIL_SENDER_PASSWORD
    networks:
      - state-checker-net
    volumes:
      - ${DATA_ROOT}/logs/check:/code/logs
    deploy:
      mode: replicated
      replicas: 1
    command: ["python", "src/check_tools.py"]


  db:
    image: mysql:8.4
    environment:
      - MYSQL_DATABASE=state_checker
      - MYSQL_USER=state_checker
      - MYSQL_PASSWORD_FILE=/run/secrets/STATECHECKER_SERVER_DB_USER_PW
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/STATECHECKER_SERVER_DB_ROOT_USER_PW
    secrets:
      - STATECHECKER_SERVER_DB_USER_PW
      - STATECHECKER_SERVER_DB_ROOT_USER_PW
    networks:
      - state-checker-net
    volumes:
      - ${DATA_ROOT}/db_data:/var/lib/mysql
      - ${DATA_ROOT}/install/database/state_checker.sql:/docker-entrypoint-initdb.d/init.sql
    deploy:
      mode: replicated
      replicas: 1

  db-migration:
    image: mysql:8.4
    environment:
      - MYSQL_DATABASE=state_checker
      - MYSQL_USER=state_checker
    secrets:
      - STATECHECKER_SERVER_DB_USER_PW
    networks:
      - state-checker-net
    volumes:
      - ${DATA_ROOT}/install/database/migrations:/scripts
    entrypoint: ["/bin/bash", "/scripts/run_migrations.sh"]

  phpmyadmin:
    image: phpmyadmin:5.2
    environment:
      - PMA_HOST=${STACK_NAME}_db
    networks:
      - state-checker-net
      - traefik
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label=traefik-public
        - traefik.http.services.statechecker-server-phpmyadmin.loadbalancer.server.port=80
        - traefik.http.routers.statechecker-server-phpmyadmin.rule=Host(`${PHPMYADMIN_URL}`)
        - traefik.http.routers.statechecker-server-phpmyadmin.entrypoints=https,http,web
        - traefik.http.routers.statechecker-server-phpmyadmin.tls=true
        - traefik.http.routers.statechecker-server-phpmyadmin.tls.certresolver=le
      mode: replicated
      replicas: ${PHPMYADMIN_REPLICAS}

    
networks:
  state-checker-net:
    driver: overlay
  traefik:
    external: true

secrets:
  "STATECHECKER_SERVER_DB_USER_PW":
    external: true
  "STATECHECKER_SERVER_DB_ROOT_USER_PW":
    external: true
  "STATECHECKER_SERVER_GOOGLE_DRIVE_SERVICE_ACCOUNT_JSON":
    external: true
  "STATECHECKER_SERVER_TELEGRAM_SENDER_BOT_TOKEN":
    external: true
  "STATECHECKER_SERVER_EMAIL_SENDER_PASSWORD":
    external: true

